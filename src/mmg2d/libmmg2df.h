! /* This file is automatically generated by the"genheader.c" code
! ** and the "genfort.pl" script (scripts directory).
! ** Do not modified it by hand, it will be discarded.
! **
! ** This scripts recopy the macros of the libmmg*.h file
! ** and convert enumerations into macros.
! **
! ** Note: "genfort.pl" is automatically called by the "genheader.c"
! ** executable code.
! **
! ** See the "libmmg*.h" file for a correct displaying of the documentation.
! */

#include "libmmgcommonf.h"

! /* =============================================================================
! **  This file is part of the mmg software package for the tetrahedral
! **  mesh modification.
! **  Copyright (c) Bx INP/Inria/UBordeaux/UPMC, 2004- .
! **
! **  mmg is free software: you can redistribute it and/or modify it
! **  under the terms of the GNU Lesser General Public License as published
! **  by the Free Software Foundation, either version 3 of the License, or
! **  (at your option) any later version.
! **
! **  mmg is distributed in the hope that it will be useful, but WITHOUT
! **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
! **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
! **  License for more details.
! **
! **  You should have received a copy of the GNU Lesser General Public
! **  License and of the GNU General Public License along with mmg (in
! **  files COPYING.LESSER and COPYING). If not, see
! **  <http://www.gnu.org/licenses/>. Please read their terms carefully and
! **  use this copy of the mmg distribution only if you accept them.
! ** =============================================================================
! */

! /**
!  * \file mmg2d/libmmg2d.h
!  * \brief API headers for the mmg2d library
!  * \author Cecile Dobrzynski and Algiane Froehly (Bx INP/Inria/UBordeaux)
!  * \version 5
!  * \date 01 2014
!  * \copyright GNU Lesser General Public License.
!  * \warning To keep the genheader working, don't break line between the enum
!  * name and the opening brace (it creates errors under windows)
!  */


! #ifndef _MMG2DLIB_H

! #include "mmgcommon.h"

! /**
!  * Maximum array size when storing adjacent points (or ball) of a vertex.
!  */

#define MMG2D_LMAX   1024

! /**
!  * \enum MMG2D_Param
!  * \brief Input parameters for mmg library.
!  *
!  * Input parameters for mmg library. Options prefixed by \a
!  * MMG2D_IPARAM asked for integers values ans options prefixed by \a
!  * MMG2D_DPARAM asked for real values.
!  *
!  */

! /*!< [-10..10] Tune level of verbosity */
#define   MMG2D_IPARAM_verbose            0
! /*!< [n/-1] Set memory size to n Mbytes or keep the default value */
#define   MMG2D_IPARAM_mem                1
! /*!< [1/0] Turn on/off debug mode */
#define   MMG2D_IPARAM_debug              2
! /*!< [1/0] Turn on/off angle detection */
#define   MMG2D_IPARAM_angle              3
! /*!< [1/0] Level-set meshing */
#define   MMG2D_IPARAM_iso                4
! /*!< [-1/0/1/2] Lagrangian option */
#define   MMG2D_IPARAM_lag                5
! /*!< [0/1/2] Read/write to gmsh visu if val=1 (out) if val=2 (in/out) */
#define   MMG2D_IPARAM_msh                6
! /*!<only if no given triangle save the subdomain nb (0==all subdomain) */
#define   MMG2D_IPARAM_numsubdomain        7
! /*!< [1/0] Avoid/allow point insertion */
#define   MMG2D_IPARAM_noinsert           8
! /*!< [1/0] Avoid/allow edge or face flipping */
#define   MMG2D_IPARAM_noswap             9
! /*!< [1/0] Avoid/allow point relocation */
#define   MMG2D_IPARAM_nomove             10
! /*!< [1/0] Avoid/allow surface modifications */
#define   MMG2D_IPARAM_nosurf             11
! /*!< [n] Number of local parameters */
#define   MMG2D_IPARAM_numberOfLocalParam 12
! /*!< [n] Specify the size of the bucket per dimension (DELAUNAY) */
#define   MMG2D_IPARAM_bucket             13
! /*!< [val] Value for angle detection */
#define   MMG2D_DPARAM_angleDetection     14
! /*!< [val] Minimal mesh size */
#define   MMG2D_DPARAM_hmin               15
! /*!< [val] Maximal mesh size */
#define   MMG2D_DPARAM_hmax               16
! /*!< [val] Control global Hausdorff distance (on all the boundary surfaces of the mesh) */
#define   MMG2D_DPARAM_hausd              17
! /*!< [val] Control gradation */
#define   MMG2D_DPARAM_hgrad              18
! /*!< [val] Value of level-set (not use for now) */
#define   MMG2D_DPARAM_ls                 19

! /*----------------------------- functions header -----------------------------*/
! /* Initialization functions */
! /* init structures */

! /**
!  * \param starter dummy argument used to initialize the variadic argument list
!  * \param ... variadic arguments. For now, you need to call the \a
!  * MMG2D_Init_mesh function with the following arguments :
!  * MMG2D_Init_mesh(MMG5_ARG_start,MMG5_ARG_ppMesh, your_mesh,
!  * MMG5_ARG_ppMet, your_metric,MMG5_ARG_end). Here, \a your_mesh is a pointer
!  * toward \a MMG5_pMesh and \a your_metric a pointer toward \a MMG5_pSol.
!  *
!  * MMG structures allocation and initialization.
!  *
!  */

! void MMG2D_Init_mesh(enum MMG5_arg starter,...);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  *
!  * Initialize file names to their default values.
!  *
!  */

! void  MMG2D_Init_fileNames(MMG5_pMesh mesh, MMG5_pSol sol);
! /**
!  * \param mesh pointer toward the mesh structure.
!  *
!  * Initialization of the input parameters (stored in the Info structure).
!  *
!  */

! void  MMG2D_Init_parameters(MMG5_pMesh mesh);

! /* init file names */
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param meshin input mesh name.
!  * \return 1.
!  *
!  * Set the name of input mesh.
!  *
!  */

! int  MMG2D_Set_inputMeshName(MMG5_pMesh mesh, char* meshin);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param meshout name of the output mesh file.
!  * \return 1.
!  *
!  * Set the name of output mesh file.
!  *
!  */

! int  MMG2D_Set_outputMeshName(MMG5_pMesh mesh, char* meshout);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param solin name of the input solution file.
!  * \return 1.
!  *
!  * Set the name of input solution file.
!  *
!  */

! int  MMG2D_Set_inputSolName(MMG5_pMesh mesh,MMG5_pSol sol, char* solin);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param solout name of the output solution file.
!  * \return 0 if failed, 1 otherwise.
!  *
!  *  Set the name of output solution file.
!  *
!  */

! int  MMG2D_Set_outputSolName(MMG5_pMesh mesh,MMG5_pSol sol, char* solout);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param iparam integer parameter to set (see \a MMG2D_Param structure).
!  * \param val value for the parameter.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set integer parameter \a iparam at value \a val.
!  *
!  */

! int MMG2D_Set_iparameter(MMG5_pMesh mesh, MMG5_pSol sol, int iparam, int val);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param dparam double parameter to set (see \a MMG2D_Param structure).
!  * \param val value of the parameter.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set double parameter \a dparam at value \a val.
!  *
!  */

! int MMG2D_Set_dparameter(MMG5_pMesh mesh, MMG5_pSol sol, int dparam, double val);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param typ type of entity (triangle, edge,...).
!  * \param ref reference of the entity.
!  * \param hmin minimal edge size.
!  * \param hmax maximal edge size.
!  * \param hausd value of the Hausdorff number.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set local parameters: set the hausdorff value at \a val for all
!  * elements of type \a typ and reference \a ref.
!  *
!  */

! int  MMG2D_Set_localParameter(MMG5_pMesh mesh, MMG5_pSol sol, int typ, int ref,
!                               double hmin,double hmax,double hausd);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param met pointer toward the sol structure.
!  * \return 1.
!  *
!  * Read local parameters file. This file must have the same name as
!  * the mesh with the \a .mmg2d extension or must be named \a
!  * DEFAULT.mmg2d.
!  *
!  */

! int  MMG2D_parsop(MMG5_pMesh mesh,MMG5_pSol met);

! /* init structure datas */
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param np number of vertices.
!  * \param nt number of triangles.
!  * \param na number of edges.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set the number of vertices, tetrahedra, triangles and edges of the
!  * mesh and allocate the associated tables. If call twice, reset the
!  * whole mesh to realloc it at the new size
!  *
!  */

! int  MMG2D_Set_meshSize(MMG5_pMesh mesh, int np, int nt, int na);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param typEntity type of solutions entities (vertices, triangles...).
!  * \param np number of solutions.
!  * \param typSol type of solution (scalar, vectorial...).
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set the solution number, dimension and type.
!  *
!  */

! int MMG2D_Set_solSize(MMG5_pMesh mesh, MMG5_pSol sol, int typEntity,
!                       int np, int typSol);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param c0 coordinate of the point along the first dimension.
!  * \param c1 coordinate of the point along the second dimension.
!  * \param ref point reference.
!  * \param pos position of the point in the mesh.
!  * \return 1.
!  *
!  * Set vertex of coordinates \a c0, \a c1 and reference \a ref
!  * at position \a pos in mesh structure
!  *
!  */

! int  MMG2D_Set_vertex(MMG5_pMesh mesh, double c0, double c1,
!                       int ref,int pos);
! /* /\** */
! /*  * \param mesh pointer toward the mesh structure. */
! /*  * \param k vertex index. */
! /*  * \return 1. */
! /*  * */
! /*  * Set corner at point \a pos. */
! /*  * */
! /*  *\/ */
! /* int  MMG2D_Set_corner(MMG5_pMesh mesh, int k); */
! /* /\** */
! /*  * \param mesh pointer toward the mesh structure. */
! /*  * \param k vertex index. */
! /*  * \return 1. */
! /*  * */
! /*  * Set point \a k as required. */
! /*  * */
! /*  *\/ */
! /* int  MMG2D_Set_requiredVertex(MMG5_pMesh mesh, int k); */

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param v0 first vertex of triangle.
!  * \param v1 second vertex of triangle.
!  * \param v2 third vertex of triangle.
!  * \param ref triangle reference.
!  * \param pos triangle position in the mesh.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set triangle of vertices \a v0, \a v1, \a v2 and reference \a ref
!  * at position \a pos in mesh structure.
!  *
!  */

! int MMG2D_Set_triangle(MMG5_pMesh mesh, int v0, int v1,
!                        int v2, int ref, int pos);
! /* /\** */
! /*  * \param mesh pointer toward the mesh structure. */
! /*  * \param k triangle index. */
! /*  * \return 1. */
! /*  * */
! /*  * Set triangle \a k as required. */
! /*  * */
! /*  *\/ */
! /* int  MMG2D_Set_requiredTriangle(MMG5_pMesh mesh, int k); */

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param v0 first vertex of edge.
!  * \param v1 second vertex of edge.
!  * \param ref edge reference.
!  * \param pos edge position in the mesh.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set edge of vertices \a v0, \a v1 and reference \a ref
!  * at position \a pos in mesh structure.
!  *
!  */

! int MMG2D_Set_edge(MMG5_pMesh mesh, int v0, int v1, int ref, int pos);
! /* /\** */
! /*  * \param mesh pointer toward the mesh structure. */
! /*  * \param k edge index. */
! /*  * \return 1. */
! /*  * */
! /*  * Set edge \a k as required. */
! /*  * */
! /*  *\/ */
! /* int  MMG2D_Set_requiredEdge(MMG5_pMesh mesh, int k); */
! /**
!  * \param met pointer toward the sol structure.
!  * \param s solution scalar value.
!  * \param pos position of the solution in the mesh.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set scalar value \a s at position \a pos in solution structure
!  *
!  */

! int MMG2D_Set_scalarSol(MMG5_pSol met, double s, int pos);

! /**
!  * \param met pointer toward the sol structure.
!  * \param m11 value at position (1,1) in the solution tensor.
!  * \param m12 value at position (1,2) in the solution tensor.
!  * \param m22 value at position (2,2) in the solution tensor.
!  * \param pos position of the solution in the mesh.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Set tensor value \a s at position \a pos in solution structure
!  *
!  */

! int MMG2D_Set_tensorSol(MMG5_pSol met, double m11, double m12, double m22,
!                         int pos);

! /** recover datas */
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param np pointer toward the number of vertices.
!  * \param nt pointer toward the number of triangles.
!  * \param na pointer toward the number of edges.
!  * \return 1.
!  *
!  * Get the number of vertices, triangles and edges of the mesh.
!  *
!  */

! int  MMG2D_Get_meshSize(MMG5_pMesh mesh, int* np, int* nt, int* na);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the sol structure.
!  * \param typEntity pointer toward the type of entities to which solutions are applied.
!  * \param np pointer toward the number of solutions.
!  * \param typSol pointer toward the type of the solutions (scalar, vectorial...)
!  * \return 1.
!  *
!  * Get the solution number, dimension and type.
!  *
!  */

! int  MMG2D_Get_solSize(MMG5_pMesh mesh, MMG5_pSol sol, int* typEntity, int* np,
!                       int* typSol);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param c0 pointer toward the coordinate of the point along the first dimension.
!  * \param c1 pointer toward the coordinate of the point along the second dimension.
!  * \param ref pointer to the point reference.
!  * \param isCorner pointer toward the flag saying if point is corner.
!  * \param isRequired pointer toward the flag saying if point is required.
!  * \return 1.
!  *
!  * Get coordinates \a c0, \a c1 and reference \a ref of
!  * vertex num of mesh.
!  *
!  */

! int  MMG2D_Get_vertex(MMG5_pMesh mesh, double* c0, double* c1, int* ref,
!                       int* isCorner, int* isRequired);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param v0 pointer toward the first vertex of triangle.
!  * \param v1 pointer toward the second vertex of triangle.
!  * \param v2 pointer toward the third vertex of triangle.
!  * \param ref pointer toward the triangle reference.
!  * \param isRequired pointer toward the flag saying if triangle is required.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Get vertices \a v0,\a v1,\a v2 and reference \a ref of next
!  * triangle of mesh.
!  *
!  */

! int MMG2D_Get_triangle(MMG5_pMesh mesh, int* v0, int* v1, int* v2, int* ref
!                        ,int* isRequired);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param e0 pointer toward the first extremity of the edge.
!  * \param e1 pointer toward the second  extremity of the edge.
!  * \param ref pointer toward the edge reference.
!  * \param isRidge pointer toward the flag saying if the edge is ridge.
!  * \param isRequired pointer toward the flag saying if the edge is required.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Get extremities \a e0, \a e1 and reference \a ref of next edge of mesh.
!  *
!  * \warning edges are not packed.
!  */

! int MMG2D_Get_edge(MMG5_pMesh mesh, int* e0, int* e1, int* ref
!                    ,int* isRidge, int* isRequired);
! /**
!  * \param met pointer toward the sol structure.
!  * \param s pointer toward the scalar solution value.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Get solution \a s of next vertex of mesh.
!  *
!  */

! int  MMG2D_Get_scalarSol(MMG5_pSol met, double* s);
! /**
!  * \param met pointer toward the sol structure.
!  * \param m11 pointer toward the position (1,1) in the solution tensor.
!  * \param m12 pointer toward the position (1,2) in the solution tensor.
!  * \param m22 pointer toward the position (2,2) in the solution tensor.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Get tensorial solution of next vertex of mesh.
!  *
!  */

! int MMG2D_Get_tensorSol(MMG5_pSol met, double *m11,double *m12,double *m22);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param met pointer toward the sol structure.
!  * \return 0 if failed, 1 otherwise.
!  *
!  * Check if the number of given entities match with mesh and sol size
!  * (not mandatory) and check mesh datas.
!  *
!  */

! int MMG2D_Chk_meshData(MMG5_pMesh mesh,MMG5_pSol met);

! /* deallocations */
! /**
!  * \param starter dummy argument used to initialize the variadic argument list.
!  * \param ... variadic arguments. For now, you need to call the \a
!  * MMG2D_Free_all function with the following arguments :
!  * MMG2D_Free_all(MMG5_ARG_start,MMG5_ARG_ppMesh, your_mesh,
!  * MMG5_ARG_ppMet, your_metric,MMG5_ARG_end). Here, \a your_mesh is a pointer
!  * toward \a MMG5_pMesh and \a your_metric a pointer toward \a MMG5_pSol.
!  *
!  * Deallocations before return.
!  *
!  * \remark we pass the structures by reference in order to have argument
!  * compatibility between the library call from a Fortran code and a C code.
!  *
!  */

! void MMG2D_Free_all(enum MMG5_arg starter,...);

! /**
!  * \param starter dummy argument used to initialize the variadic argument list.
!  * \param ... variadic arguments. For now, you need to call the \a
!  * MMG2D_Free_structures function with the following arguments :
!  * MMG2D_Free_structures(MMG5_ARG_start,MMG5_ARG_ppMesh, your_mesh,
!  * MMG5_ARG_ppMet, your_metric,MMG5_ARG_end). Here, \a your_mesh is a pointer
!  * toward \a MMG5_pMesh and \a your_metric a pointer toward \a MMG5_pSol.
!  *
!  * Structure deallocations before return.
!  *
!  * \remark we pass the structures by reference in order to have argument
!  * compatibility between the library call from a Fortran code and a C code.
!  *
!  */

! void MMG2D_Free_structures(enum MMG5_arg starter,...);

! /**
!  * \param starter dummy argument used to initialize the variadic argument list.
!  * \param ... variadic arguments. For now, you need to call the \a
!  * MMG2D_Free_names function with the following arguments :
!  * MMG2D_Free_names(MMG5_ARG_start,MMG5_ARG_ppMesh, your_mesh,
!  * MMG5_ARG_ppMet, your_metric,MMG5_ARG_end). Here, \a your_mesh is a pointer
!  * toward \a MMG5_pMesh and \a your_metric a pointer toward \a MMG5_pSol.
!  *
!  * Structure deallocations before return.
!  *
!  * \remark we pass the structures by reference in order to have argument
!  * compatibility between the library call from a Fortran code and a C code.
!  *
!  */

! void MMG2D_Free_names(enum MMG5_arg starter,...);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param filename name of the readed file.
!  * \return 0 or -1 if fail, 1 otherwise
!  *
!  * Read mesh data.
!  *
!  */

! int MMG2D_loadMesh(MMG5_pMesh mesh,char * filename);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the solution structure..
!  * \param filename name of the solution file.
!  * \return 0 or -1 if fail, 1 otherwise.
!  *
!  * Load solution field.
!  *
!  */

! int MMG2D_loadSol(MMG5_pMesh mesh,MMG5_pSol sol,char * filename);

! int MMG2D_loadVect(MMG5_pMesh ,char *);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param filename name of the readed file.
!  * \return 0 or -1 if fail, 1 otherwise.
!  *
!  * Save mesh data.
!  *
!  */

! int MMG2D_saveMesh(MMG5_pMesh ,char *);
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward the solution structure..
!  * \param filename name of the solution file.
!  * \return 0 or -1 if fail, 1 otherwise.
!  *
!  * Save metric field.
!  *
!  */

! int MMG2D_saveSol(MMG5_pMesh  mesh,MMG5_pSol sol ,char *filename);
! int MMG2D_saveVect(MMG5_pMesh mesh,MMG5_pSol sol,char *filename,double lambda);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward a sol structure (metric).
!  * \return \ref MMG5_SUCCESS if success, \ref MMG5_LOWFAILURE if failed
!  * but a conform mesh is saved and \ref MMG5_STRONGFAILURE if failed and we
!  * can't save the mesh.
!  *
!  * Main program for the mesh adaptation library .
!  *
!  */

! int MMG2D_mmg2dlib(MMG5_pMesh mesh,MMG5_pSol sol);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward a sol structure (metric).
!  * \return \ref MMG5_SUCCESS if success, \ref MMG5_LOWFAILURE if failed
!  * but a conform mesh is saved and \ref MMG5_STRONGFAILURE if failed and we
!  * can't save the mesh.
!  *
!  * Main program for the mesh generation library .
!  *
!  */

! int MMG2D_mmg2dmesh(MMG5_pMesh mesh,MMG5_pSol sol);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward a sol structure (metric).
!  * \return \ref MMG5_SUCCESS if success, \ref MMG5_LOWFAILURE if failed
!  * but a conform mesh is saved and \ref MMG5_STRONGFAILURE if failed and we
!  * can't save the mesh.
!  *
!  * Main program for the level-set discretization library .
!  *
!  */

! int MMG2D_mmg2dls(MMG5_pMesh mesh,MMG5_pSol sol) ;
! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param sol pointer toward a sol structure (displacement).
!  * \return \ref MMG5_SUCCESS if success, \ref MMG5_LOWFAILURE if failed
!  * but a conform mesh is saved and \ref MMG5_STRONGFAILURE if failed and we
!  * can't save the mesh.
!  *
!  * Main program for the rigid body movement library .
!  *
!  */

! int MMG2D_mmg2dmov(MMG5_pMesh mesh,MMG5_pSol sol);

! /* Tools for the library */
! void (*MMG2D_callbackinsert) (int ,int ,int ,int, int);

! /**
!  * \param mesh pointer toward the mesh structure.
!  * \param met pointer toward a sol structure.
!  *
!  * Set function pointers for length, caltri, buckin... depending if case is iso or aniso
!  *
!  */

! void MMG2D_setfunc(MMG5_pMesh mesh,MMG5_pSol met);

! /**
!  * \brief Return adjacent elements of a triangle.
!  * \param mesh pointer toward the mesh structure.
!  * \param kel triangle index.
!  * \param listri pointer toward the table of the indices of the three adjacent
!  * triangles of the elt \a kel (the index is 0 if there is no adjacent).
!  * \return 1.
!  *
!  * Find the indices of the 3 adjacent elements of triangle \a
!  * kel. \f$v_i = 0\f$ if the \f$i^{th}\f$ face has no adjacent element
!  * (so we are on a boundary face).
!  *
!  */

! int MMG2D_Get_adjaTri(MMG5_pMesh mesh, int kel, int listri[3]);

! /**
!  * \brief Return adjacent elements of a triangle.
!  * \param mesh pointer toward the mesh structure.
!  * \param ip vertex index.
!  * \param lispoi pointer toward an array of size MMG2D_LMAX that will contain
!  * the indices of adjacent vertices to the vertex \a ip.
!  * \return nbpoi the number of adjacent points if success, 0 if fail.
!  *
!  * Find the indices of the adjacent vertices of the vertex \a
!  * ip.
!  *
!  */

! extern
! int MMG2D_Get_adjaVertices(MMG5_pMesh mesh, int ip, int lispoi[MMG2D_LMAX]);

! /**
!  * \brief Return adjacent elements of a triangle.
!  * \param mesh pointer toward the mesh structure.
!  * \param ip vertex index.
!  * \param start index of a triangle holding \a ip.
!  * \param lispoi pointer toward an array of size MMG2D_LMAX that will contain
!  * the indices of adjacent vertices to the vertex \a ip.
!  * \return nbpoi the number of adjacent points if success, 0 if fail.
!  *
!  * Find the indices of the adjacent vertices of the vertex \a
!  * ip of the triangle \a start.
!  *
!  */

! int MMG2D_Get_adjaVerticesFast(MMG5_pMesh mesh, int ip,int start,
!                                int lispoi[MMG2D_LMAX]);

! /**
!  * \param mesh pointer toward the mesh structure
!  *
!  * Free the mesh elements (and the adjacency).
!  *
!  */

! void MMG2D_Free_triangles(MMG5_pMesh mesh);

! /**
!  * \param mesh pointer toward the mesh structure
!  *
!  * Free the mesh edges (and the associated xpoints).
!  *
!  */

! void MMG2D_Free_edges(MMG5_pMesh mesh);

! /**
!  * \param mesh pointer toward the mesh structure
!  * \param sol pointer toward the solution structure
!  *
!  * Free the solution.
!  *
!  */

! void MMG2D_Free_solutions(MMG5_pMesh mesh,MMG5_pSol sol);

! #endif
